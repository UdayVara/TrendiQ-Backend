// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum gender {
  male
  female
  unisex
}

enum orderStatus {
  pending
  confirmed
  packaed
  shipped
  outForDelivery
  delivered
}

model user {
  id         String     @id() @default(uuid())
  username   String
  email      String     @unique()
  password   String
  token      String?
  profile    String?
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @default(now())
  isVerified Boolean    @default(false)
  order      order[]
  cart       cart[]
  address    address[]
  wishlist   wishlist[]
}

model admin {
  id         String       @id() @default(uuid())
  username   String
  email      String
  password   String
  token      String?
  profile    String?
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @default(now())
  product    product[]
  enviroment enviroment[]
}

model category {
  id          String   @id() @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  products product[]
  size     size[]
}

model size {
  id                String              @id() @default(uuid())
  name              String
  description       String?
  category          category            @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  categoryId        String
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @default(now())
  product_inventory product_inventory[]
  order             order[]

  @@unique([name, categoryId])
}

model product {
  id                String   @id() @default(uuid())
  title             String
  description       String
  markupDescription String?  @default("")
  categoryId        String
  color             String
  gender            gender
  isTrending        Boolean  @default(false)
  category          category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  adminId           String
  createdAt         DateTime @default(now())
  updatedAt         DateTime @default(now())
  publicId          String

  imageUrl          String?
  order             order[]
  cart              cart[]
  admin             admin               @relation(fields: [adminId], references: [id], onDelete: NoAction)
  product_inventory product_inventory[]
  wishlist          wishlist[]
  product_images    product_images[]

  @@unique([title, categoryId, color])
}

model product_images {
  id        String  @id() @default(uuid())
  imageUrl  String
  publicId  String
  productId String
  product   product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model product_inventory {
  id            String  @id() @default(uuid())
  size          size    @relation(fields: [sizeId], references: [id], onDelete: Cascade)
  sizeId        String
  product       product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId     String
  price         Int
  stock         Int
  minimum_stock Int
  discount      Int
  cart          cart[]

  @@unique([productId, sizeId])
}

model address {
  id        String   @id() @default(uuid())
  name      String
  pincode   String
  address   String
  userId    String
  isDeleted Boolean  @default(false)
  isDefault Boolean  @default(false)
  user      user     @relation(fields: [userId], references: [id])
  order     order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model order {
  id              String      @id() @default(uuid())
  product         product     @relation(fields: [productId], references: [id], onDelete: NoAction)
  productId       String
  size            size        @relation(fields: [sizeId], references: [id])
  sizeId          String
  color           String
  orderId         String
  amount          Int
  finalAmount     Int
  discount        Int?
  quantity        Int
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @default(now())
  user            user        @relation(fields: [userId], references: [id])
  userId          String
  status          orderStatus @default(pending)
  shippingAddress String
  address         address     @relation(fields: [shippingAddress], references: [id])
}

model cart {
  id                  String            @id() @default(uuid())
  product             product           @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId           String
  user                user              @relation(fields: [userId], references: [id])
  userId              String
  quantity            Int
  product_inventoryId String
  product_inventory   product_inventory @relation(fields: [product_inventoryId], references: [id], onDelete: Cascade)
  createdAt           DateTime          @default(now())
  updatedAt           DateTime          @default(now())

  @@unique([productId, product_inventoryId, userId], name: "unique_cart_key")
}

model wishlist {
  id        String   @id() @default(uuid())
  productId String
  product   product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId    String
  user      user     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
}

model enviroment {
  id        String   @id() @default(uuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  admin     admin    @relation(fields: [userId], references: [id])
  userId    String
}
