// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model user {
  id           String         @id() @default(uuid())
  username     String
  email        String
  password     String
  token        String?
  profile      String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @default(now())
  isVerified   Boolean        @default(false)
  order        order[]
  cart         cart[]
  transactions transactions[]
  enviroment   enviroment[]
}

model admin {
  id        String    @id() @default(uuid())
  username  String
  email     String
  password  String
  token     String?
  profile   String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  products  product[]
}

model category {
  id          String   @id() @default(uuid())
  name        String
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now())

  products product[]
  size     size[]
}

model size {
  id          String    @id() @default(uuid())
  name        String    @unique()
  description String?
  category    category  @relation(fields: [categoryId], references: [id])
  categoryId  String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  product     product[]
}

model product {
  id          String    @id() @default(uuid())
  title       String    @unique()
  description String
  categoryId  String
  sizeId      String
  size        size      @relation(fields: [sizeId], references: [id])
  category    category? @relation(fields: [categoryId], references: [id])
  admin       admin?    @relation(fields: [adminId], references: [id])
  adminId     String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @default(now())
  imageUrl    String?
  order       order[]
  cart        cart[]

  @@unique([title, categoryId, sizeId])
}

model order {
  id              String   @id() @default(uuid())
  product         product  @relation(fields: [productId], references: [id])
  productId       String
  orderId         String
  amount          Int
  finalAmout      Int
  discount        Int?
  delivery        Int
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())
  user            user     @relation(fields: [userId], references: [id])
  userId          String
  shippingAddress String
}

model cart {
  id         String   @id() @default(uuid())
  product    product  @relation(fields: [productId], references: [id])
  productId  String
  user       user     @relation(fields: [userId], references: [id])
  userId     String
  amount     Int
  finalAmout Int
  discount   Int?
  delivery   Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())
}

model transactions {
  id            String   @id() @default(uuid())
  paymentToken  String
  orderId       String
  amount        Int
  finalAmout    Int
  discount      Int?
  delivery      Int
  paymentMethod String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())
  user          user?    @relation(fields: [userId], references: [id])
  userId        String?
  status        String
}

model enviroment {
  id        String   @id() @default(uuid())
  key       String
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())
  user      user     @relation(fields: [userId], references: [id])
  userId    String
}
